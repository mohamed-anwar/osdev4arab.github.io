---
layout: post
title: "مقدمة عن لغة التجميع (Assembly)"
date:   2015-07-29 22:25:00
tags: assembly 8086 x86 80x86 intro
direction: rtl
author: mohamed-anwar
comments: true
---

تخيل الأسلوب الآتي في التعبير عن حل المعادلة 
<pre><code>9x – 3 = 15</pre></code>
	
1. نقوم بجمع (3) على (15) لنحصل على (18). `9x = 15 + 3 = 18`
2.	 نقوم بقسمة (18) على (9) لنحصل على (2) و تكون هي قيمة x المطلوبة. `x = 18 / 9 = 2`

في المثال السابق تم تمثيل الحل على عدة خطوات بحيث تمثل كل خطوة عملية واحده، هذه هي الطريقة الوحيدة التي تفهمها الآلات للقيام بحل مشكلة؛ عن طريق تمثيل الحل على عدة خطوات متتالية تمثل العمليات المطلوبة لحل المشكلة (كل عملية على حده)، ويتم تمثيل هذه الخطوات بلغة خاصة تعرف بـ “لغة الآلة ( Machine language )”.


ولكن كيف تبدو لغة الآلة؟ وكيف نقوم بكتابتها؟

- الكود الآتي هو كود حل المثال السابق بلغة الآلة <sup> الخاصة بمعالجات 80x86 </sup>
<pre><code>1011100000001111000000001000001111000000000000111011101000001001000000001111011111110010
</pre></code>
لم تفهم شيء؟! لا تقلق سنبسط الأمر قليلاً عن طريق تمثيل الأوامر منفردة:
```
101110000000111100000000
100000111100000000000011
101110100000100100000000
1111011111110010
```
ايضاً لم تفهم شيء؟! حسناً هذا هو حال البشر؛ لغة الآله هي لغة تفهمها الآلة فقط و غير مطلوب من البشر ان يفهموها!

ولكن لأننا سنحتاج هذا لاحقاً سنقوم بتوضيح ماذا يفعل كل أمر:
```
101110000000111100000000 	يقوم بتخزين الرقم (15) في مسجل داخلي للمعالج
100000111100000000000011	يقوم بجمع (3) على الرقم الموجود في المسجل
101110100000100100000000	يقوم بتخزين الرقم (9) في مسجل آخر في المعالج
1111011111110010			يقوم بقسمة قيمة المسجل الأول على قيمة المسجل الثاني
```
ولكن اذا كانت "لغة الآلة" هي اللغة الوحيدة التي تفهمها الآله و لا يمكننا فهمها؛ إذاً كيف سنقوم ببرمجة الآلة؟ إجابة هذا السؤال هي "لغة الأسمبلي".


###ما هي لغة الأسمبلي (لغة التجميع – Assembly language)؟
حسب تعريف  [ويكيبيديا Wikipedia](https://ar.wikipedia.org/wiki/%D9%84%D8%BA%D8%A9_%D8%AA%D8%AC%D9%85%D9%8A%D8%B9):
>``` “هي الصيغة السهلة القراءة للبشر المقابلة للغة الآلة التي تشكل الأوامر التي ينفذها حاسوب بتصميم ما. فلغة الآلة عبارة عن تتابع من البتات (bits) تمثل عملية حاسوبية أو أمر للحاسوب، تصبح أسهل للقراءة عندما تستبدل برموز تعبر عنها.”```

والتفسير ان لغة الأسمبلي هي نفسها لغة الآلة ولكن مكتوبة بطريقة يفهمها البشر (مثل استخدام الأرقام العشرية وكلمات شبيهه بالإنجليزية).


فمثلاً؛ كود الأسمبلي الذي يقوم بحل المثال هو:
```
MOV	AX, 15
ADD	AX, 3
MOV	DX, 9
DIV	DX
```
هذا أفضل كثيراً من الأصفار والآحاد و يمكن للبشر ان يفهموه بسهولة، و هذا ما سنتعلمه من خلال هذه السلسلة بإذن الله.


### لماذا نستخدم لغة الأسمبلي (Assembly)؟
هناك عدة أسباب:

* مع أن اللغات المتطورة مثل C / C++ / Java / Python يمكنها حل أي مشكلة تقريباً، لكن هذه اللغات تحتاج الى مكتبات تشغيل (Run-time libraries) لكن في بيئة بدون نظام تشغيل (كما في حالة "محمل الإقلاع ( Bootloader )”) لا يمكنك استخدام هذه اللغات بطريقة مباشرة.

* معظم لغات البرمجة مصممة بحيث تكون غير معتمدة على معمارية المعالج (Processor Architecture) و بالتالي لا يمكنك تنفيذ أوامر خاصة بالمعالج بطريقة سهله في هذه اللغات.

* (خاص بمعالجات 80x86) معظم لغات البرمجة (الحالية) لا تدعم انتاج اوامر 16bit لذلك لا يمكنها العمل على المعالج في وقت الاقلاع (Boot) --سنتعرف على هذه النقطة بالتفصيل في سلسلة محملات الإقلاع.

* لغة الأسمبلي اسرع كثيراً (من حيث وقت التنفيذ) من اللغات الأخرى لأنها لا تحتاج أي مكتبات من أي نوع.

* لغة الأسمبلي ممتعة!
